import pygame

class orange:

    image_bg = None
    win_width = 0
    win_height = 0
    win_size = None
    win = None

    imagesRight = []
    imagesLeft = []
    img_index = 0
    h_w = 0
    h_h = 0
    pos_x = 150  # начальная позиция X человека
    pos_y = 0  # начальная позиция Y человека
    step = 0

    press_time = 0  # время удержания клавиши нажатой
    int_pressed = 100  # интервал паузы, потом смещение человека в mlsek

    clock = None
    key = None

    isRight = False

    def __init__(self):

        pygame.init()

        self.image_bg = pygame.image.load('./orange/bg1200.jpg')  # загружаем фон игры
        self.win_width, self.win_height = self.image_bg.get_rect().size  # узнаём размеры фона
        self.win_size = (self.win_width, self.win_height)  # запоминаем размеры
        self.win = pygame.display.set_mode(self.win_size)  # делаем окно по размерам фона
        self.win.blit(self.image_bg, (0, 0))  # рисуем фон на окне

        img_namesRight = ('./orange/0r.png','./orange/1r.png','./orange/2r.png','./orange/3r.png','./orange/4r.png')  # имена рисунков шагов человека
        for name in img_namesRight:
            self.imagesRight.append(pygame.image.load(name).convert_alpha())

        img_namesLeft = ('./orange/0l.png','./orange/1l.png','./orange/2l.png','./orange/3l.png','./orange/4l.png')
        for name in img_namesLeft:
            self.imagesLeft.append(pygame.image.load(name).convert_alpha())

        self.img_index = 0  # индекс текущего образа человека
        self.h_w, self.h_h = self.imagesRight[self.img_index].get_rect().size  # размеры рисунка человека
        self.step = self.h_w // 3  # размер шага человека
        self.pos_x = 150  # начальная позиция X человека
        self.pos_y = self.win_height - self.h_h - 135  # начальная позиция Y человека
        self.win.blit(self.imagesRight[self.img_index], (self.pos_x, self.pos_y))  # рисуем текущий образ человека


        self.clock = pygame.time.Clock()  # объект для фиксации промежутков времени

        pygame.display.update()  # обновляем окно

        self.loop()

    def printing(self):

        self.win.blit(self.image_bg, (0, 0))  # рисуем фон на окне
        if self.isRight == True:
            self.win.blit(self.imagesRight[self.img_index], (self.pos_x, self.pos_y))  # рисуем человека поверх фона
        else:
            self.win.blit(self.imagesLeft[self.img_index], (self.pos_x, self.pos_y))  # рисуем человека поверх фона
        pygame.display.update()  # обновляем окно

    def updateTime(self):
        self.clock.tick()  # в каждой итерации фиксируем время
        self.press_time += self.clock.get_rawtime()  # накапливаем время удержания

    def getKeys(self):
        self.key = pygame.key.get_pressed()  # узнаём какая клавиша нажата


    def checkEvents(self):
        for e in pygame.event.get():
            if e.type == pygame.QUIT:  # если нажали ВЫХОД
                pygame.quit()

    def traffic(self):
        if self.press_time > self.int_pressed:  # если превысили интервал паузы
            self.press_time = 0  # сбрасываем для следующего цикла удержания
            self.getKeys()
            if self.pos_x > self.h_w and self.key[pygame.K_LEFT]:
                self.pos_x -= self.step  # движение влево
                self.img_index = (self.img_index + 1) % len(self.imagesRight)
                self.isRight = False
                self.printing()
            if self.pos_x + self.step < self.win_width - self.h_w and self.key[pygame.K_RIGHT]:
                self.pos_x += self.step  # движение вправо
                self.img_index = (self.img_index + 1) % len(self.imagesLeft)  # 0 1 2 -> 3 => 0 1 2
                self.isRight = True
                self.printing()


    def loop(self):
        while True:
            self.updateTime()
            self.traffic()
            self.checkEvents()

a = orange()
